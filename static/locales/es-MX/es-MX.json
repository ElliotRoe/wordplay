{
    "$schema": "../../schemas/Locale.json",
    "language": "es",
    "region": "MX",
    "wordplay": "Juego de Palabras",
    "newProject": "$?",
    "term": {
        "evaluate": "evaluar",
        "bind": "unir",
        "decide": "decidir",
        "document": "documento",
        "project": "proyecto",
        "source": "fuente",
        "input": "input",
        "output": "producción",
        "convert": "convertir",
        "act": "acto",
        "scene": "escena",
        "phrase": "frase",
        "group": "grupo",
        "stage": "escenario",
        "type": "tipo",
        "start": "comenzar",
        "entered": "ingresó",
        "changed": "cambiada",
        "moved": "movido",
        "name": "nombre",
        "value": "valor",
        "text": "texto",
        "boolean": "booleano",
        "map": "mapa",
        "number": "número",
        "function": "función",
        "exception": "excepción",
        "table": "tabla",
        "none": "ninguna",
        "list": "lista",
        "stream": "arroyo",
        "structure": "estructura",
        "index": "índice",
        "query": "pregunta",
        "row": "fila",
        "set": "set",
        "key": "clave"
    },
    "token": {
        "EvalOpen": "evaluación abierta",
        "EvalClose": "evaluación cerrada",
        "SetOpen": "set abierta",
        "SetClose": "set cerrada",
        "ListOpen": "lista abierta",
        "ListClose": "lista cerrada",
        "TagOpen": "etiqueta abierta",
        "TagClose": "etiqueta cerrada",
        "Bind": "unir",
        "Access": "acceso de propiedad",
        "Function": "función",
        "Borrow": "pedir prestado",
        "Share": "compartir",
        "Convert": "convertir",
        "Doc": "explicación",
        "Formatted": "formateado",
        "FormattedType": "tipo formateado",
        "Words": "palabras",
        "Link": "enlace web",
        "Italic": "itálica",
        "Underline": "subrayar",
        "Light": "ligero",
        "Bold": "negrita",
        "Extra": "extra",
        "Concept": "enlace conceptual",
        "URL": "URL",
        "Code": "codigo",
        "Mention": "mencionar",
        "Branch": "rama",
        "None": "nada",
        "Type": "escribir",
        "TypeOperator": "es",
        "TypeOpen": "input para escribir abierto",
        "TypeClose": "input para escribrir cerrado",
        "Separator": "separadora de nombres",
        "Language": "etiqueta de idioma",
        "Region": "guión de región",
        "BooleanType": "tipo booleano",
        "NumberType": "tipo de número",
        "JapaneseNumeral": "número japonés",
        "RomanNumeral": "número romano",
        "Pi": "pi",
        "Infinity": "infinidad",
        "TableOpen": "tabla abierta",
        "TableClose": "tabla cerrada",
        "Select": "seleccionar",
        "Insert": "insertar",
        "Update": "actualizar",
        "Delete": "borrar",
        "Union": "unión",
        "Stream": "próxima",
        "Change": "cambiar",
        "Initial": "evaluacion primera",
        "Previous": "anterior",
        "Placeholder": "marcador de posición",
        "Etc": "etcétera",
        "This": "esta",
        "Operator": "operadora",
        "Conditional": "condicional",
        "Text": "texto",
        "Number": "número",
        "Decimal": "número decimal",
        "Base": "numeral base",
        "Boolean": "booleano",
        "Name": "nombre",
        "Unknown": "desconocido",
        "Locale": "lugar local",
        "End": "final"
    },
    "node": {
        "Dimension": {
            "name": "dimensión",
            "description": "dimensión",
            "emotion": "serious",
            "doc": [
                "¡Soy un /unidad de medida/!",
                "Yo puedo ser cualquier unidad estandarizada, come \\1m\\, \\10s\\, \\100g\\, o cualquier unidid cientifica. Estoy feliz ser cualqueir unidad que quieres inventar tu también, como \\17manzana\\.",
                "Puedo combinar con \\/\\ para formar unidades de proporción, como \\17manzanas/día\\ y con \\^\\ para formar unidades exponenciales como \\9.8m/s^2\\.",
                "Siempre debo ir después de @Number. Si no lo hago, podrían confudirme con @Reference, ¡lo cual sería bastantate embarazoso!",
                "También soy bastante bueno para encontrar inconsistencies entre unidades. Por ejemplo, !\\1gato + 1perro\\ no tiene ningún sentido!",
                "Si alguna vez deseas convertir entre diferentes valores de unidades, hable con @Convert."
            ]
        },
        "Doc": {
            "name": "documentación",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Docs": {
            "name": "lista de documentación",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "KeyValue": {
            "name": "par clave/valor",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Language": {
            "name": "lengua",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "conflict": {
                "UnknownLanguage": "$?",
                "MissingLanguage": "$?"
            }
        },
        "Name": {
            "name": "nombre",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Names": {
            "name": "lista de nombres",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Row": {
            "name": "la hilera",
            "emotion": "neutral",
            "doc": "$?",
            "conflict": {
                "InvalidRow": "$?",
                "MissingCell": { "primary": "$?", "secondary": "$?" },
                "UnknownColumn": "$?",
                "ExtraCell": {
                    "primary": "$?",
                    "secondary": "$?"
                },
                "UnexpectedColumnBind": {
                    "primary": "$?",
                    "secondary": "$?"
                }
            }
        },
        "Token": {
            "name": "token",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Markup": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?"
        },
        "Paragraph": {
            "name": "párrafo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "WebLink": {
            "name": "enlace",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "ConceptLink": {
            "name": "concepto",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Words": {
            "name": "palabras",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Example": {
            "name": "ejemplo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Mention": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?"
        },
        "Branch": {
            "name": "$?",
            "emotion": "serious",
            "doc": "$?"
        },
        "BinaryEvaluate": {
            "name": "operación binaria",
            "description": "operación $1",
            "emotion": "neutral",
            "doc": "$?",
            "right": "input",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "OrderOfOperations": "$?"
            }
        },
        "Bind": {
            "name": "nombrar",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "DuplicateName": { "primary": "$?", "secondary": "$?" },
                "DuplicateShare": { "primary": "$?", "secondary": "$?" },
                "IncompatibleType": { "primary": "$?", "secondary": "$?" },
                "MisplacedShare": "$?",
                "MissingShareLanguages": "$?",
                "RequiredAfterOptional": "$?",
                "UnexpectedEtc": "$?",
                "UnusedBind": "$?"
            }
        },
        "Block": {
            "name": "block",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "statement": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "ExpectedEndingExpression": "$?",
                "IgnoredExpression": { "primary": "$?", "secondary": "$?" }
            }
        },
        "BooleanLiteral": {
            "name": "boolean",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "Borrow": {
            "name": "pedir prestado",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "source": "$?",
            "bind": "$?",
            "version": "$?",
            "conflict": {
                "UnknownBorrow": "$?",
                "BorrowCycle": "$?"
            },
            "exception": {
                "CycleException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "Changed": {
            "name": "Cambiada",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "Conditional": {
            "name": "condicional",
            "emotion": "neutral",
            "doc": [
                "¿Alguna vez pensaste en cómo decidimos?",
                "Pienso mucho en eso.",
                "Tantas decisiones en la vida pueden ser tan complicadas.",
                "A veces siento mucha presión para decidir, ya que soy el único en este mundo que puede decidir.",
                "Me siento abrumado, así que he tratado de simplificar las cosas.",
                "Primero, solo considero dos opciones: \\⊤\\ y \\⊥\\.",
                "Si es \\⊤\\, entonces evalúo mi código *sí*. Si es \\⊥\\, entonces evalúo mi código *no*.",
                "Sé que las decisiones rara vez son tan simples, pero dividir el mundo en estos binarios me facilita las cosas.",
                "Sí, no, si, si no, esto, aquello.",
                "Es mi pequeña forma de mantener las cosas organizadas, incluso ante tanta complejidad."
            ],
            "start": "$?",
            "afterthen": "$?",
            "else": "$?",
            "finish": "$?",
            "condition": "$?",
            "yes": "$?",
            "no": "$?",
            "conflict": {
                "ExpectedBooleanCondition": {
                    "primary": "$?",
                    "secondary": "$?"
                }
            }
        },
        "ConversionDefinition": {
            "name": "conversión",
            "description": "$1 → $2",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "MisplacedConversion": "$?"
            }
        },
        "Convert": {
            "name": "convertir",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "UnknownConversion": "$?"
            },
            "exception": {
                "ConversionException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "Delete": {
            "name": "delete row",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "DocumentedExpression": {
            "name": "expresión documentada",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "Evaluate": {
            "name": "evaluar",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "evaluate": "$?",
            "finish": "$?",
            "function": "$?",
            "input": "$?",
            "conflict": {
                "IncompatibleInput": { "primary": "$?", "secondary": "$?" },
                "UnexpectedTypeInput": { "primary": "$?", "secondary": "$?" },
                "MisplacedInput": "$?",
                "MissingInput": { "primary": "$?", "secondary": "$?" },
                "NotInstantiable": "$?",
                "UnexpectedInput": { "primary": "$?", "secondary": "$?" },
                "UnknownInput": { "primary": "$?", "secondary": "$?" },
                "InputListMustBeLast": "$?"
            },
            "exception": {
                "FunctionException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "ExpressionPlaceholder": {
            "name": "marcador de posición",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "placeholder": "$?",
            "conflict": {
                "Placeholder": "$?"
            },
            "exception": {
                "UnimplementedException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "FunctionDefinition": {
            "name": "función",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "NoExpression": "$?"
            }
        },
        "Iteration": {
            "name": "función de orden superior",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "initialize": "$?",
            "next": "$?",
            "check": "$?",
            "finish": "$?"
        },
        "Initial": {
            "name": "evaluación inicial",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Insert": {
            "name": "insertar",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "Is": {
            "name": "es",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "ImpossibleType": "$?"
            },
            "exception": {
                "TypeException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "IsLocale": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?",
            "start": "$?"
        },
        "ListAccess": {
            "name": "acceso a la lista",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "ListLiteral": {
            "name": "lista",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "item": "$?"
        },
        "MapLiteral": {
            "name": "índice",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "NotAKeyValue": { "primary": "$?", "secondary": "$?" }
            }
        },
        "NumberLiteral": {
            "name": "número",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "NotANumber": "$?"
            }
        },
        "BasisExpression": {
            "name": "$! expresión incorporada",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "NoneLiteral": {
            "name": "nada",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "Previous": {
            "name": "previa",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "Program": {
            "name": "programa",
            "emotion": "neutral",
            "doc": "$?",
            "unevaluated": "el nodo seleccionado no evaluó",
            "start": "$?",
            "halt": "$?",
            "finish": "$?",
            "done": "terminado de evaluar",
            "exception": {
                "BlankException": {
                    "description": "$?",
                    "explanation": "¡Estoy tan emocionada de montar un espectáculo contigo! ¿Por dónde deberíamos empezar?"
                },
                "EvaluationLimitException": {
                    "description": "$?",
                    "explanation": "$?"
                },
                "StepLimitException": {
                    "description": "$?",
                    "explanation": "$?"
                },
                "ValueException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "PropertyBind": {
            "name": "refinar",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "PropertyReference": {
            "name": "acceso a la propiedad",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "property": "propiedad"
        },
        "Reaction": {
            "name": "reacción",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "initial": "inicial",
            "condition": "condición",
            "next": "próxima",
            "conflict": {
                "ExpectedStream": "$?"
            }
        },
        "Reference": {
            "name": "referencia",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "UnknownName": "$?",
                "ReferenceCycle": "$?",
                "UnexpectedTypeVariable": "$?"
            },
            "exception": {
                "NameException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "Select": {
            "name": "seleccionar",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "ExpectedSelectName": "$?"
            }
        },
        "SetLiteral": {
            "name": "recopilación",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "SetOrMapAccess": {
            "name": "acceso al conjunto/mapa",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "IncompatibleKey": { "primary": "$?", "secondary": "$?" }
            }
        },
        "Source": {
            "name": "documento",
            "emotion": "neutral",
            "doc": "$?"
        },
        "StreamDefinition": {
            "name": "arroyo",
            "emotion": "neutral",
            "doc": "defines a stream of values.",
            "start": "define this stream type"
        },
        "StructureDefinition": {
            "name": "estructura",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "define this structure type",
            "conflict": {
                "DisallowedInputs": "$?",
                "IncompleteImplementation": "$?",
                "NotAnInterface": "$?",
                "UnimplementedInterface": "$?"
            }
        },
        "TableLiteral": {
            "name": "tabla",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "item": "row",
            "start": "first evaluate the rows",
            "finish": "$?"
        },
        "TextLiteral": {
            "name": "texto",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?"
        },
        "Translation": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?"
        },
        "FormattedLiteral": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?",
            "start": "$?"
        },
        "FormattedTranslation": {
            "name": "$?",
            "description": "$?",
            "emotion": "$?",
            "doc": "$?"
        },
        "This": {
            "name": "esta",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "MisplacedThis": "$?"
            }
        },
        "UnaryEvaluate": {
            "name": "operación unaria",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?"
        },
        "UnparsableExpression": {
            "name": "no analizable",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "conflict": {
                "UnparsableConflict": "$?",
                "UnclosedDelimiter": "$?"
            },
            "exception": {
                "UnparsableException": {
                    "description": "$?",
                    "explanation": "$?"
                }
            }
        },
        "Update": {
            "name": "update rows",
            "emotion": "neutral",
            "doc": "$?",
            "start": "$?",
            "finish": "$?",
            "conflict": {
                "ExpectedColumnBind": "$?",
                "IncompatibleCellType": { "primary": "$?", "secondary": "$?" }
            }
        },
        "AnyType": {
            "name": "tipo de cualquier",
            "emotion": "neutral",
            "doc": "$?"
        },
        "BooleanType": {
            "name": "tipo de booleano",
            "emotion": "neutral",
            "doc": "$?"
        },
        "ConversionType": {
            "name": "tipo de conversión",
            "emotion": "neutral",
            "doc": "$?"
        },
        "FormattedType": {
            "name": "$?",
            "emotion": "$?",
            "doc": "$?"
        },
        "ExceptionType": {
            "name": "tipo de excepción",
            "emotion": "neutral",
            "doc": "$?"
        },
        "FunctionDefinitionType": {
            "name": "tipo de función",
            "emotion": "neutral",
            "doc": "$?"
        },
        "FunctionType": {
            "name": "tipo de función",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "ListType": {
            "name": "tipo de lista",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "MapType": {
            "name": "tipo de índice",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NumberType": {
            "name": "tipo de número",
            "description": "$1 ?? [$1 | number]",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NameType": {
            "name": "tipo de nombre",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?",
            "conflict": {
                "UnknownTypeName": "$?"
            }
        },
        "NeverType": {
            "name": "tipo de nunca",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NoneType": {
            "name": "tipo de nada",
            "emotion": "neutral",
            "doc": "$?"
        },
        "SetType": {
            "name": "tipo de recopilación",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "StreamDefinitionType": {
            "name": "streamtipo de arroyo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "StreamType": {
            "name": "streamtipo de arroyo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "StructureType": {
            "name": "tipo de estructura",
            "description": "$1",
            "emotion": "neutral",
            "doc": "$?"
        },
        "UnknownType": {
            "name": "desconocida",
            "unknown": "$?",
            "connector": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "TableType": {
            "name": "tipo de tabla",
            "emotion": "neutral",
            "doc": "$?",
            "conflict": {
                "ExpectedColumnType": "$?"
            }
        },
        "TextType": {
            "name": "tipo de texto",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "TypePlaceholder": {
            "name": "tipo de marcador de posición",
            "emotion": "neutral",
            "doc": "$?"
        },
        "UnionType": {
            "name": "tipo de opción",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "Unit": {
            "name": "unidad de medida",
            "description": "$1",
            "emotion": "neutral",
            "doc": "$?"
        },
        "TypeInputs": {
            "name": "lista de variable de tipo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "TypeVariable": {
            "name": "variable de tipo",
            "emotion": "neutral",
            "doc": "$?",
            "conflict": {
                "DuplicateTypeVariable": { "primary": "$?", "secondary": "$?" }
            }
        },
        "TypeVariables": {
            "name": "lista de variable de tipo",
            "emotion": "neutral",
            "doc": "$?"
        },
        "UnparsableType": {
            "name": "tipo no analizable",
            "emotion": "neutral",
            "doc": "$?"
        },
        "VariableType": {
            "name": "tipo variable",
            "emotion": "neutral",
            "doc": "$?"
        },
        "CycleType": {
            "name": "tipo de ciclo",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "UnknownVariableType": {
            "name": "tipo de variable desconocido",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NotAType": {
            "name": "tipo sin lista",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NoExpressionType": {
            "name": "tipo sin expresión",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NotEnclosedType": {
            "name": "no en estructura, conversión o reacción",
            "emotion": "neutral",
            "doc": "$?"
        },
        "NotImplementedType": {
            "name": "typo sin implementado",
            "emotion": "neutral",
            "doc": "$?"
        },
        "UnknownNameType": {
            "name": "tipo de nombre desconocido",
            "description": "$?",
            "emotion": "neutral",
            "doc": "$?"
        }
    },
    "basis": {
        "Boolean": {
            "doc": [
                "Nosotros somos \\T\\ y \\⊥\\. \\T\\ es verdadero. \\⊥\\ is falso. \\T\\ no es \\⊥\\; \\⊥\\ no es \\T\\. Asi funcionamos"
            ],
            "name": ["T⊥", "Booleano"],
            "function": {
                "and": {
                    "doc": [
                        "Yo evaluo a \\T\\ *solo* cuando los dos valors son \\T\\.Útil para determinar si muchas cosas son verdadero. Solo hay cuatro resultados posibles",
                        "\\T & T\\",
                        "\\T & ⊥\\",
                        "\\⊥ & T\\",
                        "\\⊥ & ⊥\\"
                    ],
                    "names": ["y", "&"],
                    "inputs": [
                        {
                            "doc": "El otro @Booleano a evaluar. Si el primer valor es \\⊥\\, no importa el resto de valores, la funcion siempre va a evaluar a \\⊥]\\.",
                            "names": "valor"
                        }
                    ]
                },
                "or": {
                    "doc": [
                        "Yo evaluo a \\T\\ cuando *cualquier* valor es \\T\\. Útil para determinar si one de muchas cosas es verdadero. Solo hay cuatro resultados posibles",
                        "\\T & T\\",
                        "\\T & ⊥\\",
                        "\\⊥ & T\\",
                        "\\⊥ & ⊥\\"
                    ],

                    "names": ["o", "|"],
                    "inputs": [
                        {
                            "doc": "El otro @Booleano a evaluar. Si el primer valor es \\⊥\\, la funcion solo evaluara a \\T\\ si esto es \\T\\.",
                            "names": "valor"
                        }
                    ]
                },
                "not": {
                    "doc": "Yo devuelvo lo opuesto a mi: si \\T\\, devuelvo \\⊥\\, si \\⊥\\, devuelvo \\T\\",
                    "names": ["no", "~"],
                    "inputs": []
                },
                "equals": {
                    "doc": "\\T\\ si los dos son \\T\\ or los dos son \\⊥\\.",
                    "names": ["=", "igual "],
                    "inputs": [
                        {
                            "doc": "El otro valor para evaluar",
                            "names": "value"
                        }
                    ]
                },
                "notequal": {
                    "doc": "\\T\\ si los dos son opuestos",
                    "names": "noIgual",
                    "inputs": [
                        {
                            "doc": "El otro valor para evalar.",
                            "names": "valor"
                        }
                    ]
                }
            },
            "conversion": {
                "text": "Convierte un @Booleano a el equivalente valor de @Texto \\'⊤'\\ and \\'⊥'\\"
            }
        },
        "None": {
            "doc": [
                "/Hi, @DeficionDeFuncion aqui. @Nada no le gusta hablar mucho, so interpretare./",
                "Yo soy @Nada. Invocame con \\ø\\. Yo soy util cuando quieres representar al ausencia de algo."
            ],
            "name": ["ø", "none"],
            "function": {
                "equals": {
                    "doc": "Es otro valor tambien nada? Mas vale, de otra manera, \\⊥\\.",
                    "names": ["=", "igual"],
                    "inputs": [{ "doc": "El otro valor", "names": "valor" }]
                },
                "notequals": {
                    "doc": "Es el otro valor /no/ nada?",
                    "names": ["≠", "noIgual"],
                    "inputs": [{ "doc": "El otro valor", "names": "valor" }]
                }
            },
            "conversion": {
                "text": "Queres hacer \\ø\\ a '\\ø\\'? Esta es tu oportunidad."
            }
        },
        "Text": {
            "doc": [
                "Yo puedo ser cualquier texto que tu quieras, en cualquier idioma, y usando cualquiera de estos simbolos de abrir y cerra: \\\"\"\\, \\“”\\, \\„“\\, \\''\\, \\‘’\\, \\‹›\\, \\«»\\, \\「」\\, or \\『』\\.",
                "Para ilustrar, considera una de estas bonitas frases.",
                "\\“Solo hay dos maneras de vivir la vidad. Una es como si nada fuera un milagro. La otra es como si todo fuera un milagro.”\\",
                "Solo recuerada de cerrarme si me abres, y usa el simbolo coincidente. Si no es asi, no sabre que has terminado con tus palabras.",
                "\\'hola' /es-MX 'hello' /en\\",
                "Tambine me puedes etiquetar con idiomas, y tambien me puedes pasar multiples traducciones. Yo evaluare a cualquier idioma que este actualmente seleccionado.",
                "Si tu quieres crearme con otro tipo de valores, puedes utilizar un simbolo",
                "Por ejemplo:",
                "\\\"Mira estas sumas \\1 + 2\\, \\2 + 3\\, \\3 + 4\\\"\\",
                "Mira que elegante yo evaluo esas sumas, y la pongo adentro del @Texto",
                "De cual quier manera, hay muchas funciones gloriosas que @DefinicionDeFuncion a hecho para mi, para poder hacer todo tipo de cosas con palabras!"
            ],
            "name": "Texto",
            "function": {
                "length": {
                    "doc": [
                        "Yo evaluo el numero de caracteres legibles en el texo; una letra es un caracter, un emotico es un caracter, etx. Por ejemplo:",
                        "\\'hola'.longitud()\\",
                        "\\'🐈📚'.longitud()"
                    ],
                    "names": ["📏", "longitud"],
                    "inputs": []
                },
                "equals": {
                    "doc": "\\T\\ so yo soy la misma sequencia de caracteres en el @Texto dado",
                    "names": ["=", "equals"],
                    "inputs": [{ "doc": "El @Texto a", "names": "valor" }]
                },
                "notequals": {
                    "doc": "\\T\\ si /no/ soy la misma sequencia de caracteres en el @Texto dado",
                    "names": "≠",
                    "inputs": [{ "doc": "El @Texto", "names": "valor" }]
                },
                "repeat": {
                    "doc": [
                        "Yo creo @Texto nuevo, repetido un cierto numero de veces",
                        "\\'hey' · 5'\\",
                        "Si me das un @Numero fracional, yo lo ignorare, \\'hey' · 5.5\\",
                        "Si me das un @Numero negativo, Yo te doy un @Texto vacio.",
                        "\\'hey' · -5\\"
                    ],
                    "names": "repetir",
                    "inputs": [{ "doc": "$?", "names": "contar" }]
                },
                "segment": {
                    "doc": [
                        "Yo mismo de divido en una @Lista de @Texto, usando el @Texto dado como un separador, y removiendo el separador. Por ejemplo:",
                        "\\'manzanas, naranjas, uvas' ÷ ','\\",
                        "Si el separador esta vacio, yo me dividere en caracteres:",
                        "\\'🖌️🏠🥸' ÷ ''\\"
                    ],
                    "names": ["÷", "segmento"],
                    "inputs": [
                        {
                            "doc": "El @Texto para usar como separador",
                            "names": "delimitador"
                        }
                    ]
                },
                "has": {
                    "doc": [
                        "\\T\\ si el @Texto dado aperence dentro de mi.",
                        "\\'podiste encontras lo que estabas buscando?'.tiene('podiste')\\"
                    ],
                    "names": ["tiene"],
                    "inputs": [
                        { "doc": "El @Texto para buscarme", "names": "texto" }
                    ]
                },
                "starts": {
                    "doc": "\\T\\ si yo comienzo con el @Texto dado.",
                    "names": ["comienza"],
                    "inputs": [
                        {
                            "doc": "El @Texto para verificar que comienzo con el",
                            "names": "texto"
                        }
                    ]
                },
                "ends": {
                    "doc": "\\T\\ si el yo termino con el @Texto dado",
                    "names": ["termina"],
                    "inputs": [
                        {
                            "doc": "El @Texo para verificar si esta al final de mi",
                            "names": "texto"
                        }
                    ]
                },
                "combine": {
                    "doc": [
                        "Hay veces que es util combinar @Texto(s) en uno, Dame otro @Texto y creare un nuevo texto con nos junte",
                        "\\'hola ' + 'verso'"
                    ],
                    "names": ["+", "combinar"],
                    "inputs": [
                        { "doc": "El texto para adjuntar", "names": "texto" }
                    ]
                }
            },
            "conversion": {
                "list": "Divide el @Texto en una isto con los caracteres individuales",
                "number": "Convierte el @Texto en un @Numero, y si no es un numero, resultara en un valor no numeral"
            }
        },
        "Number": {
            "doc": [
                "Yo creo un @Numero, con cualquier numero de unidades que tu te puedas imaginar",
                "Aqui estan mis top 5:",
                "\\0\\",
                "\\1historia\\",
                "\\πtartas\\",
                "\\∞rocas\\",
                "\\10000000abrazos\\",
                "Eso es basicamenete una cantidad infinita de numeros.",
                "Y una cantidad infinita de unidades",
                "Y una cantidad infinita de pares numero/unidad…",
                "Yo puedo ser enteros, numeros reales, negativo, positivo, fraccional, decimal, incluso no un numero",
                "Y me puedes con muchos diferentes systemas de numeros, uncluyendo arabe \\123\\, Romano \\ⅩⅩⅩⅠⅩ\\, Japones \\二十\\, y mas:",
                "\\1 + Ⅰ + 一\\",
                "Tu tambien me puedes escribir en bases 2 a 16 poniendo un numero baso asi:",
                "\\2;11111111\\",
                "\\10;255\\",
                "16;FF\\",
                "Hay un numero especial llamado NaN, que es posible cuando escribes algo que no es un numero:",
                "\\2;22\\",
                "Noy hay un digito '2' en base de 2, entonces no es un numero valido. NaN va a aparecer si tratas de covertir algo que no es un numero a texto",
                "\\'hola'→#\\"
            ],
            "name": "numero",
            "function": {
                "add": {
                    "doc": [
                        "Yo sumo un @Numero con mi misma @Unidad, creando un nuevo @Numero de la misma @Unidad",
                        "Por ejemplo:",
                        "\\1 + 1\\",
                        "\\3gatos + 5gatos\\",
                        "Si las unidads no coinciden, yo parare a mostrar \\3gatos + 5gaots\\"
                    ],
                    "names": ["+", "add"],
                    "inputs": [
                        { "doc": "El @Numero a sumar", "names": "number" }
                    ]
                },
                "subtract": {
                    "doc": [
                        "Yo resto el @Numero que me das de yo mismo, creando un nuevo @Numero de la mismo @Unidad:",
                        "Por ejemplo:",
                        "\\1 - 1\\",
                        "\\3gatos - 5gatos\\",
                        "Si las unidades no coinciden, parare a monstrar.",
                        "\\3gatos - 5perros\\"
                    ],
                    "names": ["-", "subtract"],
                    "inputs": [
                        { "doc": "El @Numero a restar", "names": "numero" }
                    ]
                },
                "multiply": {
                    "doc": [
                        "Yo me multiplico por el @Numero dado, creando un producto de mi @Unidad y la @Unidad del numero dado:",
                        "\\5 · 5\\",
                        "5m · 5m\\",
                        "\\5m · 1/s\\"
                    ],
                    "names": ["·", "multiplicar"],
                    "inputs": [
                        { "doc": "El @Numero a multiplicar", "names": "numero" }
                    ]
                },
                "divide": {
                    "doc": [
                        "Yo me divido por el @Numero dado, creando una cociente de mi @Unidad y la unidad del numero dado:",
                        "\\5 ÷ 5\\",
                        "\\5m ÷ 5m\\",
                        "\\5m ÷ 5s\\"
                    ],
                    "names": ["÷", "divide"],
                    "inputs": [
                        { "doc": "El @Numero a dividir por", "names": "numero" }
                    ]
                },
                "remainder": {
                    "doc": [
                        "Yo me divido por le @Numero dado, pero devuelvo los restante:",
                        "\\10 % 2\\",
                        "\\10m % 2\\",
                        "\\10m/s % 3\\"
                    ],
                    "names": ["%", "remainder"],
                    "inputs": [
                        {
                            "doc": "Ell @Numero a dividir por",
                            "names": "numero"
                        }
                    ]
                },
                "positive": {
                    "doc": [
                        "Yo creo un @Numero nuevo que me hace positivo, si es negativo.",
                        "\\-200.positivo()\\"
                    ],
                    "names": ["positivo"],
                    "inputs": []
                },
                "round": {
                    "doc": [
                        "Yo creo un @Numero nuevo que me rondea a el intero mas cercano",
                        "\\9.4.rondear()\\",
                        "\\9.5.rondear()\\",
                        "\\9.6.rondear()\\"
                    ],
                    "names": ["rondear"],
                    "inputs": []
                },
                "roundDown": {
                    "doc": [
                        "Yo creo un nuevo @Numero que rondea a entero mas pequeño que yo.",
                        "\\10.5.rondearBajo()\\",
                        "\\10.1.rondearBajo()\\",
                        "\\10.01.rondearBajo()\\"
                    ],
                    "names": ["rondearBajo"],
                    "inputs": []
                },
                "roundUp": {
                    "doc": [
                        "Yo creo un nuevo @Numero que rondea a el entero mas grande que yo",
                        "\\10.5.rondearArriba()\\",
                        "\\10.9.rondearArriba()\\",
                        "\\10.99.rondearArriba()\\"
                    ],
                    "names": ["rondearArriba"],
                    "inputs": []
                },
                "power": {
                    "doc": [
                        "Yo me elevo a el poder del @Numero dado. Exponentes fracionales son acceptados",
                        "\\2 ^ 8\\",
                        "\\10 ^ -2\\",
                        "\\5 ^ -.5\\"
                    ],
                    "names": ["^", "elevado"],
                    "inputs": [
                        {
                            "doc": "El exponente a elevarme a",
                            "names": "numero"
                        }
                    ]
                },
                "root": {
                    "doc": [
                        "Yo creo la raiz de yo mismo usando la raiz dada.",
                        "\\4 √ 2\\",
                        "\\1000 √ 3\\"
                    ],
                    "names": ["√", "root"],
                    "inputs": [
                        { "doc": "La raiz a computar", "names": "numero" }
                    ]
                },
                "lessThan": {
                    "doc": [
                        "\\T\\ si yo soy menor a @Numero dado:",
                        "\\1 < 2\\",
                        "\\2 < 1\\"
                    ],
                    "names": ["<", "menorQue"],
                    "inputs": [
                        { "doc": "El @Numero a comparar", "names": "numero" }
                    ]
                },
                "lessOrEqual": {
                    "doc": [
                        "\\T\\ si yo soy menor o igual a el @Numero dado:",
                        "\\1 ≤ 2\\",
                        "\\2 ≤ 1\\",
                        "\\2 ≤ 2\\"
                    ],
                    "names": ["≤", "lessorequal"],
                    "inputs": [
                        { "doc": "El @Numero a comparar", "names": "numero" }
                    ]
                },
                "greaterThan": {
                    "doc": [
                        "\\T\\ si yo soy mayor a el @Numero dado:",
                        "\\1 > 2\\",
                        "\\2 > 1\\"
                    ],
                    "names": [">", "greaterthan"],
                    "inputs": [
                        { "doc": "El @Numero a comparar", "names": "number" }
                    ]
                },
                "greaterOrEqual": {
                    "doc": [
                        "\\T\\ si yo soy mayor a igual a el @Numero dado:",
                        "\\1 ≥ 2\\",
                        "\\2 ≥ 1\\",
                        "\\2 ≥ 2\\"
                    ],
                    "names": ["≥", "greaterorequal"],
                    "inputs": [
                        { "doc": "El @Numero a comparar", "names": "numero" }
                    ]
                },
                "equal": {
                    "doc": "\\T\\ si soy igual al @Numero dado",
                    "names": "igual",
                    "inputs": [
                        { "doc": "El @Numero a comparar", "names": "numero" }
                    ]
                },
                "notequal": {
                    "doc": "\\T\\ si /no/ soy igual al el @Numero dado",
                    "names": "≠",
                    "inputs": [
                        { "doc": "El @Numero a compara", "names": "numero" }
                    ]
                },
                "cos": {
                    "doc": ["Calcula el coseno", "\\π.cos()\\"],
                    "names": ["cos", "coseno"],
                    "inputs": []
                },
                "sin": {
                    "doc": ["Calcula el seno", "\\π.sin()\\"],
                    "names": ["sin", "seno"],
                    "inputs": []
                }
            },
            "conversion": {
                "text": "Una representacion Arabe de mis digitos en @Texto",
                "list": "Una lista the numeros de 1 a cualquier nomero dado, por ejemplo \n\\10→[]\\.",
                "s2m": "Segundos a minutos",
                "s2h": "Segunados a horas",
                "s2day": "Segundos a dias",
                "s2wk": "Segundos a semanas",
                "s2year": "Segundos a años",
                "s2ms": "Segundos a milisegundos",
                "ms2s": "Millisegundos a segundos",
                "min2s": "Minutos a segundos",
                "h2s": "Horas a segundos",
                "day2s": "Dias a segundos",
                "wk2s": "Semanas a segundos",
                "yr2s": "Años a segundos",
                "m2pm": "Metros a picometros",
                "m2nm": "Metros a nanometros",
                "m2micro": "Metros a micrometers",
                "m2mm": "Metros a milimetros",
                "m2cm": "Metros a centimetros",
                "m2dm": "Metros a decimetros",
                "m2km": "Metros a kilometros",
                "m2Mm": "Metros a megametros",
                "m2Gm": "Metros a gigametros",
                "m2Tm": "Metros a terametros",
                "pm2m": "Picometros a metros",
                "nm2m": "Nanometros a metros",
                "micro2m": "Micrometros a metros",
                "mm2m": "Milimetros a metros",
                "cm2m": "Centimetros a metros",
                "dm2m": "Decimetros a metros",
                "km2m": "Kilometros a metros",
                "Mm2m": "Megametros a metros",
                "Gm2m": "Gigametros a metros",
                "Tm2m": "Terametros a metros",
                "km2mi": "Kilometros a millas",
                "mi2km": "Millas a kilometros",
                "cm2in": "Centimetros a pulgadas",
                "in2cm": "Pulgadas a centimetros",
                "m2ft": "Metros a pies",
                "ft2m": "Pies a metros",
                "g2mg": "Gramos a miligramos",
                "mg2g": "Miligramos a gramos",
                "g2kg": "Gramos a kilogramos",
                "kg2g": "Kilogramos a gramos",
                "g2oz": "Gramos a onzas",
                "oz2g": "Onzas a gramos",
                "oz2lb": "Onzas a libras",
                "lb2oz": "Libras a onzas"
            }
        },
        "List": {
            "doc": [
                "Yo soy una sequencia de valores, de cualquier tipo!",
                "Puedes ponder lo que quieras adentro de mi: @Booleano, @Numero, @Texo, @Nada, incluso @Lista, @Set, @Mapa, or cualquier otra expresión. Asi seria una simple:",
                "\\['manzana' 'platano' 'mango']\\",
                "Lo que me hace espcial es que yo mantengo las cosas en orden, y yo enumero todo desde el 1 hasta la canditad de elementos que yo tenga",
                "Mis elementos son enumerados, comenzando por el 1. Tu puedes obtener que to tengo con @AccesoDeLista, usando su numero:",
                "Por ejemplo, el segundo valor en esta lista es \\['platano']\\",
                "\\['manzana' 'platano' 'mango'][2]\\",
                "Puedo tener lo que sea adentro de mi. Mira a esta lista con @Texto, @Numero y @Tiempo",
                "\\['manzana' 10 + 10 Time()]\\",
                "Yo puedo hacer un monton de cosas interesantes con mi @DefinicionDeFuncion"
            ],
            "name": ["[]", "list"],
            "kind": "Kind",
            "out": "Result",
            "outofbounds": "outofbounds",
            "function": {
                "add": {
                    "doc": [
                        "Yo puedo crear una nueva @Lista con el elemento dado"
                    ],
                    "names": "agregar",
                    "inputs": [
                        {
                            "doc": "El valor que tu quiera agregar",
                            "names": "elemento"
                        }
                    ]
                },
                "append": {
                    "doc": [
                        "Yo creo una nueva @Lista con mis valors, y con los otros valoers te la otra @Lista dada.",
                        "\\['manzana' 'platano' 'mango'].adjuntar(['sandia' 'fresa'])\\"
                    ],
                    "names": "adjuntar",
                    "inputs": [
                        {
                            "doc": "La lista de valores para adjuntar",
                            "names": "lista"
                        }
                    ]
                },
                "replace": {
                    "doc": [
                        "Yo creo una nueva listo que reemplaza el value en el índice dado.",
                        "\\['manzana' 'platano' 'mango'].reemplazar(1, 'kiwi')\\"
                    ],
                    "names": ["reemplazar"],
                    "inputs": [
                        {
                            "doc": "El valor del índice a reemplazar",
                            "names": "índice"
                        },
                        { "doc": "El valor de reemplazo", "names": "valor" }
                    ]
                },
                "length": {
                    "doc": "El @Numero de elemento adentro de mi.",
                    "names": "longitud",
                    "inputs": []
                },
                "random": {
                    "doc": [
                        "Aleatoriamente seleciona uno de mis elementos, o @Nada si estoy vacia.",
                        "\\['manzana' 'platano' 'mango'].azar()"
                    ],
                    "names": "azar",
                    "inputs": []
                },
                "first": {
                    "doc": [
                        "Mi primer valor, o @Nada si estoy vacia.",
                        "\\['manzana' 'platano' 'mango'].primera()\\"
                    ],
                    "names": "primera",
                    "inputs": []
                },
                "last": {
                    "doc": [
                        "Mi ultimo valor, o @Nada si estoy vacia.",
                        "\\['manzana' 'platano' 'mango'].ultima()"
                    ],
                    "names": "última",
                    "inputs": []
                },
                "has": {
                    "doc": [
                        "\\T\\ si yo tengo un elemento igual a el elemento dado.",
                        "\\['apple' 'platano' 'mango'].tiene('platano')\\"
                    ],
                    "names": "tiene",
                    "inputs": [
                        { "doc": "El valor a buscar", "names": "elemento" }
                    ]
                },
                "join": {
                    "doc": [
                        "I combino los elemento en mi listo a @Texto, separado por el separador dado @Texto.",
                        "\\['manzana' 'platano' 'mango'].unirse(', ')\\"
                    ],
                    "names": "unirse",
                    "inputs": [
                        {
                            "doc": "El texto para separar los elemntos, lo puede dejar basio",
                            "names": "separador"
                        }
                    ]
                },
                "subsequence": {
                    "doc": [
                        "Yo obtengo una listo adentro de una listo, comenzando con el indice proveeido, y terminado con el ultimo elmento o con un elemento particula si es proveido.",
                        "\\['manzana' 'platano' 'mango'].subsecuencia(2)\\",
                        "\\['manzana' 'platano' 'mango'].subsecuencia(1 2)\\",
                        "Mira que cuando to provees numero en orden invertido, Yo te doy eso ordern invertido.",
                        "\\['manzana' 'platano' 'mango'].subsecuencia(3 1)\\",
                        "Si me das algo menor 1 una yo voy a asumir que querras decir 1.",
                        "\\['manzana' 'platano' 'mango'].subsecuencia(-1123123234)\\",
                        "Y si me das algo mayor a el indice mas grande, yo voy a asumer que querras decir el final.",
                        "\\['manzana' 'platano' 'mango'].subsecuencia(234234234234)\\"
                    ],
                    "names": "subsecuencia",
                    "inputs": [
                        {
                            "doc": "El indice del primero elemento de la subsecuencia que tu quieras.",
                            "names": "comienzo"
                        },
                        {
                            "doc": "La indice opcional de el ultimo elemento de la subsecuencia que tu quieras. Si me das algo, tu lista va a terminar con el ultimo valor en la lista original",
                            "names": "final"
                        }
                    ]
                },
                "sansFirst": {
                    "doc": [
                        "Yo creo una listo sin mi primer elemento",
                        "\\['manzana' 'platano' 'mango'].sinPrimero()\\"
                    ],
                    "names": "sinPrimero",
                    "inputs": []
                },
                "sansLast": {
                    "doc": [
                        "Yo creo una listo sin mi ultimo elemento",
                        "\\['manzana' 'platano' 'mango'].sinUltimo()\\"
                    ],
                    "names": "sinÚltimo",
                    "inputs": []
                },
                "sans": {
                    "doc": [
                        "Yo, pero sin la primer ocurrencia del el valor dado.",
                        "\\['manzana' 'platano' 'mango' 'manzana'].sin('manzana')"
                    ],
                    "names": "sin",
                    "inputs": [
                        {
                            "doc": "El valor a eliminar en la primara occurencia",
                            "names": "valor"
                        }
                    ]
                },
                "sansAll": {
                    "doc": [
                        "Yo, pero sin todas la occurencias del valor dado.",
                        "\\['manzana' 'platano' 'mango' 'manzana'].sinTodo('manzana')\\"
                    ],
                    "names": "sinTodo",
                    "inputs": [
                        {
                            "doc": "El valor a eliminar todas la occurencias de las lista",
                            "names": "valor"
                        }
                    ]
                },
                "reverse": {
                    "doc": [
                        "Yo, pero en inverso",
                        "\\['manzana' 'platano' 'mango'].inverso()"
                    ],
                    "names": "inverso",
                    "inputs": []
                },
                "equals": {
                    "doc": [
                        "\\T\\ si mi elementos y order son exactamento los mismo a la @Lista dada",
                        "\\['manzana' 'platano' 'mango'] = ['manzana' 'platano' 'mango']\\"
                    ],
                    "names": ["=", "equals"],
                    "inputs": [
                        { "doc": "La @Lista a comparar", "names": "lista" }
                    ]
                },
                "notequals": {
                    "doc": [
                        "\\T\\ si mi elmento y orden /no/ so exactamento los mismo a la @Lista dada.",
                        "\\['manzana' 'platano' 'mango'] ≠ ['manzana' 'platano' 'mango']\\"
                    ],
                    "names": "≠",
                    "inputs": [
                        { "doc": "La @Lista a comparar", "names": "lista" }
                    ]
                },
                "translate": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que reciva un valor y opcionalmente un indice como entradas, y produce un valor, y yo evaluare esa funcion en cada de mis elementos.",
                        "Por ejemplo, imagina que so soy una lista de @Numero y quieres duplicar el valor de cada uno de los elementos:",
                        "\\[2 4 6 8].traducir(ƒ(num•#) num · 2)\\"
                    ],
                    "names": "traducir",
                    "inputs": [
                        {
                            "doc": "Una @DefinicionDeFuncion que a va traducir cada elemento",
                            "names": "tranductor"
                        }
                    ],
                    "translator": [
                        {
                            "doc": "El elemento que se va traducir",
                            "names": "elemento"
                        },
                        {
                            "doc": "El indice del elemento que va a traducir",
                            "names": "indice"
                        },
                        {
                            "doc": "La lista que se va a traducir",
                            "names": "lista"
                        }
                    ]
                },
                "filter": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que reciva un valor y opcionalmente un indice come entradas y produce un @Booleano, Yo creare una nueva lista que solo incluye elementos con el resultado \\T\\.",
                        "Por ejemplo, imagina yo soy una @Lista de @Numero y solo quieres los numeros positivos:",
                        "\\[2 -4 8 -16].filtrar(ƒ(num•#) num ≥ 0)\\"
                    ],
                    "names": "filtrar",
                    "inputs": [
                        {
                            "doc": "Una @DefinicionDeFuncion que chequea cada elemento, produciendo \\T\\ si deberia ser conservado en la list",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "El elemento siendo verificado",
                            "names": "Elemento"
                        },
                        {
                            "doc": "El indice del el elemento siendo verificado",
                            "names": "indice"
                        },
                        {
                            "doc": "La lista siendo filtrada ",
                            "names": "lista "
                        }
                    ]
                },
                "all": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que recive un valor con entrada y produce un @Booleano si el valor coincide con la condicion. Yo creare \\T\\ si todos los elementos coinciden con la condicion.",
                        "Por ejemplo, imagina que yo soy una @Lista de @Nuero y quieres saber si todos los numeros son positivos:",
                        "\\[2 -4 8 -16].todos(ƒ(num•#) num ≥ 0)\\"
                    ],
                    "names": "todos",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que produce \\T\\ si el elementon satisface yu condicion",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "El elemento siendo verificado",
                            "names": "Elemento"
                        },
                        {
                            "doc": "El indice del el elemento siendo verificado",
                            "names": "indice"
                        },
                        {
                            "doc": "La lista siendo filtrada ",
                            "names": "lista "
                        }
                    ]
                },
                "until": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que recive un valor como entrada y produce un @Booleano si el valor coincide con la condicion. Yo creare una nueva @Lista que contiene todos los elementos hasta que la condicion no sea satisfecha.",
                        "Por ejemplo, imagina que yo soy una @Lista de @Texto de animales, y quieres todos los animals que \\'rata'\\ sea encontrado:",
                        "\\['gato' 'perro' 'rata' 'caballo' 'pony']hasta(ƒ(animal•'') animal = 'rata')\\"
                    ],
                    "names": "hasta",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que produce \\T\\ si yo deberia de parar de incluir elementos",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "El elemento siendo verificado",
                            "names": "Elemento"
                        },
                        {
                            "doc": "El indice del el elemento siendo verificado",
                            "names": "indice"
                        },
                        {
                            "doc": "La lista siendo filtrada ",
                            "names": "lista "
                        }
                    ]
                },
                "find": {
                    "doc": [
                        "Dame una @DeficionDeFuncion que recive un valor como entrada y porduce un @Booleano si coincide con una criteria, y yo evaluare a el elemento que coincide con esa criteria.",
                        "Por ejemplo, imagina que tu quieres encontrar el primer animal con la vocal \\'e'\\:",
                        "['gato' 'perro' 'rata' 'raton' 'pony'].encontrar(ƒ(animal•'') animal.tiene('e'))"
                    ],
                    "names": "encontrar",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que proudce \\T\\ si coincide con tu criteria de busquedad",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "El elemento siendo verificado",
                            "names": "Elemento"
                        },
                        {
                            "doc": "El indice del el elemento siendo verificado",
                            "names": "indice"
                        },
                        {
                            "doc": "La lista siendo filtrada ",
                            "names": "lista "
                        }
                    ]
                },
                "combine": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que recive el combinacion mas reciente y el valor que sigue, y crea la siguiente combinacion. Yo me movere desde mi primer hasta mi ultimo elemento, creando una combinacion subsesiva, y evaluando la combinacion final a lo que tu @DeficionDeFuncion evalua",
                        "Estoy es muy util para combinar todos los elementos dentro de mi en un solo valor. Por ejemplo, imagina que tu quiere sumar una @Lista de @Numero:",
                        "\\[3 9 2 8 1 4].combinar(0 ƒ(sum•# num•#) sum + num)\\"
                    ],
                    "names": "combinar",
                    "inputs": [
                        { "doc": "La combinacion inicial", "names": "inicial" },
                        {
                            "doc": "El siguiento elemento a combinar",
                            "names": "combinador"
                        }
                    ],
                    "combiner": [
                        {
                            "doc": "La combinacion actual",
                            "names": "combinación"
                        },
                        {
                            "doc": "El siguiente elemento a combinar",
                            "names": "siguiente"
                        },
                        {
                            "doc": "El indice del siguiente elemento",
                            "names": "índice"
                        },
                        {
                            "doc": "La lista a combinar",
                            "names": "lista"
                        }
                    ]
                },
                "sorted": {
                    "doc": [
                        "Yo puedo recivir una lista, y crear una nueva lista con sus valores ordenados. Algo asi:",
                        "\\[1 5 8 0 2].ordenado()\\",
                        "Yo tambien lo puedo hacer con valores de @Texto",
                        "\\['naranja' 'kiwi' platano' 'manzana'].ordenado()",
                        "Y si tienes una lista con valores que no son de @Numero o de @Texto, tu me puedes dar una @DefinicionDeFuncion que combierte cada elemento a un @Numero, para que yo lo pueda ordenar. Por ejemplo, aqui esta una lista de listas con longitudes diferentes; si me das una funcion que combierte cada listo en su longitud, yo puedo ordenar por sus longitudes.",
                        "\\[[1] [2 3] [4 8 12] [8]]ordenado(ƒ(list) lista.longitud())\\"
                    ],

                    "names": "ordenado",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion opcionla para ordenar elementos en la listo. La definicion deberia de combertir el elemento a un @Numero que puede ser usado para ordenar una lista",
                            "names": "sequenciador"
                        }
                    ],
                    "sequencer": [
                        {
                            "doc": "El valor a combertir en un @Numero",
                            "names": "valor"
                        }
                    ]
                }
            },
            "conversion": {
                "text": "A una representacion de @Texto de una lista",
                "set": "A un @Set, util para remover valores duplicados"
            }
        },
        "Set": {
            "doc": [
                "Yo soy una conjunto de valores! Eso significa que yo cualquier valor de valores, incluyendo valores sin valor. Tu me puedes crear asi:",
                "\\{1 2 3 }\\",
                "Yo soy muy util si quieres tener una coleccion de cosas sin valores duplicados",
                "Eso significa pasas valores que yo ya tengo, simplemente los ignorare.",
                "Por ejempo, este conjunto tiene muchos duplicados:",
                "\\{1 1 2 2 3 3}\\.",
                "Si quieres ver si yo tengo una valor adentro de mi, @AccessoDeMapaOConjunto puede ser de ayuda:",
                "\\{'frasco' 'botella' 'vaso'}{'copa'}\\"
            ],
            "name": ["{}", "conjunto"],
            "kind": "Kind",
            "out": "Result",
            "function": {
                "size": {
                    "doc": "Yo te dire cuanots valores yo tengo",
                    "names": "tamaño",
                    "inputs": []
                },
                "equals": {
                    "doc": [
                        "\\T\\ si me das un @Conjunto y temenemos los mismo valores:",
                        "\\{1 2 3} = {2 3 4}\\"
                    ],
                    "names": ["=", "igual"],
                    "inputs": [
                        {
                            "doc": "El @Conjunto a ser comparado",
                            "names": "conjunto"
                        }
                    ]
                },
                "notequals": {
                    "doc": [
                        "Yo soy \\T\\ si me pasas un @Conjunto y yo /no/ tengo los mismos valores:",
                        "\\{1 2 3} ≠ {2 3 4}\\"
                    ],
                    "names": "≠",
                    "inputs": [
                        {
                            "doc": "El @Conjunto a ser comparado",
                            "names": "conjunto"
                        }
                    ]
                },
                "add": {
                    "doc": [
                        "Dame un elemento para sumar y yo creare un nuevo @Set con mis elementos y el elemento dado.",
                        "\\{1 2 3} + 4\\"
                    ],
                    "names": ["sumar", "+"],
                    "inputs": [
                        { "doc": "El elemento a sumar", "names": "elemento" }
                    ]
                },
                "remove": {
                    "doc": [
                        "Dame un elemento para remover y yo creare un nuevo @Set sin ese elemento"
                    ],
                    "names": ["remove", "-"],
                    "inputs": [
                        { "doc": "El elemento a remover", "names": "elemento" }
                    ]
                },
                "union": {
                    "doc": [
                        "Dame un @Conjunto y yo creare un nuevo @Conjunto que tiene mis elementos y tambien los elementos del otro @Conjuto",
                        "\\{1 2 3} ∪ {3 5 6}"
                    ],
                    "names": ["union", "∪"],
                    "inputs": [
                        { "doc": "El @Conjunto a combinar", "names": "set" }
                    ]
                },
                "intersection": {
                    "doc": [
                        "Dame un @Conjunto y yo creare un nuevo @Conjuto que solo tiene los elemento que los dos conjuntos tienen en comun",
                        "\\{1 2 3} ∩ {3 4 5}\\"
                    ],
                    "names": ["interseccion", "∩"],
                    "inputs": [
                        {
                            "doc": "El @Conjunto a comparar",
                            "names": "conjunto"
                        }
                    ]
                },
                "difference": {
                    "doc": [
                        "Dame un @Conjuton y yo creare un nuevo @Conjunto que tiene los valores que son unicos en cada @Conjuton",
                        "\\{1 2 3}.diferencia({3 4 5})\\"
                    ],
                    "names": "diferencia",
                    "inputs": [
                        { "doc": "El conjunto a comparar", "names": "conjuton" }
                    ]
                },
                "filter": {
                    "doc": [
                        "Dame una @DeficionDeFuncion que recive un elemento y produce \\T\\ si deberia de ser convervado, y yo creare un @Conjuton que solo contiene elementes que cumpla con tu criteria.",
                        "Por ejemplo, vamos a encontrar todos los numeros impares adentro de mi:",
                        "\\{1 2 3 4 5 6 7 8 9}.filtrar(ƒ(num•#) (num % 2) = 1)\\"
                    ],
                    "names": "filtrar",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que verifica un elemento para ver si deberia ser conservado",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "El elemento siendo verificado",
                            "names": "valor"
                        },
                        {
                            "doc": "El conjunto siendo filtrado",
                            "names": "conjunto"
                        }
                    ]
                },
                "translate": {
                    "doc": [
                        "Dame una @DeficionDeFuncion que recive un elemento y produce un nuevo elemento basado en el mismo, depues yo voy a traducir todos mis elementos a un nuevo @Conjuton (removiendo duplicados).",
                        "Por ejemplo, vamos a combertir todos los @Numero(s)a @Texto:",
                        "\\{1 2 3 4 5 6 7 8 9}.traducir(ƒ(num•#) num→'')\\"
                    ],
                    "names": "traducir",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que traduce uno de mis elementos a un nuevo elemento que tu desees",
                            "names": "traductor"
                        }
                    ],
                    "translator": [
                        {
                            "doc": "El elemento siendo traducido",
                            "names": "valor"
                        },
                        {
                            "doc": "El conjunto siendo traducido",
                            "names": "conjunto"
                        }
                    ]
                }
            },
            "conversion": {
                "text": "Una representacion de @Texto de un @Conjunto",
                "list": "Una representacion de los elementos en un @conjunto en una @Lista"
            }
        },
        "Map": {
            "doc": [
                "Yo emparejo valores, mapeando *llaves* a *valores*. Por ejemplo:",
                "\\{'rosa': 6puntos 'tony':3puntos 'isabela':8puntos}\\",
                "Mis llaves pueden ser de cualquier tipo de valor, y tambien mis valores",
                "Personas piensan de mi como si yo fuera un indice o un diccionario, donde tu me das una llave, y yo te doy a lo que esta mapeado.",
                "Si quieres ver a lo algo esta mapeado a. tu le puedes pasar a @AccessoDeMapaOConjunto, una llave y ellos de daran el valor:",
                "\\{'rosa': 6puntos 'tony':3puntos 'isabela':8puntos}{'tony'}\\",
                "Si noy hay una llave que coincida, yo te dare @Nada.",
                "\\{'rosa': 6puntos 'tony':3puntos 'isabela':8puntos}{'juan'}\\",
                "Tu tambien puedes crear un mapa vacio asi:",
                "\\{:}\\",
                "Yo se hacer muchas cosas maravillosas con mis emparejamientos."
            ],
            "name": ["{:}", "Mapa"],
            "key": "Key",
            "value": "Value",
            "result": "Result",
            "function": {
                "size": {
                    "doc": "Yo te devuelvo cuantos valores yo tengo",
                    "names": "tamaño",
                    "inputs": []
                },
                "equals": {
                    "doc": [
                        "\\{T}\\ si mi emparejamientos son exactamente los mismos a el @Mapa dado.",
                        "\\{1:1 2:2} = {1:1 2:3}\\"
                    ],
                    "names": ["=", "equals"],
                    "inputs": [
                        { "doc": "El @Mapa a comparar", "names": "valor" }
                    ]
                },
                "notequals": {
                    "doc": [
                        "\\{T}\\ si mis emparejamientos /no/ son exactamente los mismo a el @Mapa dado.",
                        "\\{1:1 2:2} ≠ {1:1 2:3}\\"
                    ],
                    "names": "≠",
                    "inputs": [
                        { "doc": "El @Mapa a comparar", "names": "valor" }
                    ]
                },
                "set": {
                    "doc": [
                        "Yo creare un nuevo @Mapa con los mismos emparejamientos, pero con el neuvo emparejamiento que tu me das. Si yo tengo la llave, con los emparejare con el nuevo valor.",
                        "\\{'rosa': 6puntos 'tony':3puntos 'isabela':8puntos}.emparejar('juan' 0puntos)\\"
                    ],
                    "names": "emparejar",
                    "inputs": [
                        {
                            "doc": "La llave para emparejar con el valor",
                            "names": "llave"
                        },
                        {
                            "doc": "El valor para empajar con la llave",
                            "names": "valor"
                        }
                    ]
                },
                "unset": {
                    "doc": [
                        "Yo creare un nuevo @Mapa sin la llave que tu me das, removiendo su emparejamiento.",
                        "\\{'rosa': 6puntos 'tony':3puntos 'isabela':8puntos}.desemparejar('rosa')\\"
                    ],
                    "names": "desemparejar",
                    "inputs": [
                        { "doc": "La llave a remover", "names": "llave" }
                    ]
                },
                "remove": {
                    "doc": [
                        "Yo creare un nuevo @Mapa sin la llaves que tenga el valor que tu me des.",
                        "\\{'rosa': 6puntos 'tony':3puntos 'isabela':3puntos}.remover(3puntos)\\"
                    ],
                    "names": "remover",
                    "inputs": [
                        {
                            "doc": "El valor a remover, junto a las llaves con las que estan emparejadas",
                            "names": "valor"
                        }
                    ]
                },
                "filter": {
                    "doc": [
                        "Pasame una @DeficionDeFuncion que recive una llave y un valor y evalua a \\T\\ si la pareja deberia de ser conservada. Yo creare un nuevo @Mapa que cumple tu criteria.",
                        "Por ejemplo, aqui queres mantener las parejas que tiene la llave 'juan' o tengo un valor de mas de cero puntos",

                        "\\{'juan': 0points 'ana': 0points 'tony':3points}.filtrar(ƒ(llave•'' valor•#puntos) (llave = 'amy') | (valor > 0puntos))\\"
                    ],

                    "names": "filtrar",
                    "inputs": [
                        {
                            "doc": "La @DefinicionDeFuncion que decide mantener una pareja o no",
                            "names": "verificador"
                        }
                    ],
                    "checker": [
                        {
                            "doc": "La llave siendo verificada",
                            "names": "llave"
                        },
                        {
                            "doc": "El valor siendo verificado",
                            "names": "valor"
                        },
                        { "doc": "El mapa siendo verificado", "names": "mapa" }
                    ]
                },
                "translate": {
                    "doc": [
                        "Dame una @DefinicionDeFuncion que recive una llave y un valor y evalua el valor a un nuevo valor. Yo creare un nuevo @Mapa con las misma llaves pero con los valores nuevos.",
                        "Por ejemplo, vamos a darle un punto a todos, porque se an comportado muy bien",
                        "\\{'juan': 0points 'ana': 0points 'tony':3points}.traducir(ƒ(llave•'' valor•#points) valor + 1puntos)"
                    ],
                    "names": "traducir",
                    "inputs": [
                        {
                            "doc": "La @DefincionDeFuncion que traduce cada valor",
                            "names": "traductor"
                        }
                    ],
                    "translator": [
                        {
                            "doc": "La llave siendo traducida",
                            "names": "llave"
                        },
                        {
                            "doc": "El valor siendo traducido",
                            "names": "valor"
                        },
                        { "doc": "El mapa siendo traducido", "names": "mapa" }
                    ]
                }
            },
            "conversion": {
                "text": "Una representacion de un mapa a @Texto",
                "set": "La llaves de un @Mapa",
                "list": "una listo con los valores de un @mapa"
            }
        },
        "Table": {
            "doc": [
                "Yo soy un conjunto de filas de tablas! Yo puedo te puedo ayudar a mantener al corriente de colleciones grandes de valores que tienen la misma estructura.",
                "Por ejemplo, imaginemos que queremos una almacenar los nombres de muchos tipos de rocas:",
                "\\⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'gris'⎦\n⎡'citrino' 'amarillo'⎦\\",
                "@Unir nos puede ayudar a nombrar la tabla, y tambien puedes hacer cosas, como actualizar la tabla con una nuevo fila con @Insertar:",
                "\\rocas: ⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'griz'⎦\n⎡'citrino' 'amarillo'⎦\nrocas ⎡+ 'cuarzo' 'blanco'⎦\\",
                "Si queres encontrar una fila que coince con alguna condicion, tu puede @Seleccionar filas con esa condicion:",
                "\\rocas: ⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'griz'⎦\n⎡'citrino' 'amarillo'⎦\n\nrocas ⎡?⎦ color = 'gris'\\",
                "O talves tu queres crear una tabla con valores actualizados, con filas que complen una condicion:",
                "\\rocas: ⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'gris'⎦\n⎡'citrino' 'amarillo'⎦\nrocas ⎡: color: 'black' ⎦ name = 'pomez'\\",
                "Tambine puedes borrar filas que cumplen una condicion:",
                "\\rocas: ⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'gris'⎦\n⎡'citrino' 'amarillo'⎦\nrocas ⎡- nombre.tiene('i')\\",
                "Y si quieres consultar valores especificos que to tengo, tu puedes convertir cualquier tabla a una lista y acceder filas individualmento con @ReferenciaDePropiedad",
                "\\rocas: ⎡nombre•'' color•''⎦\n⎡'obsidiano' 'negro'⎦\n⎡'pomez' 'gris'⎦\n⎡'citrino' 'amarillo'⎦\n(rocas → [])[1].nombre\\"
            ],
            "name": ["⎡⎦", "Tabla"],
            "row": "Fila",
            "function": {
                "equals": {
                    "doc": "Yo compruevo que yo tengo las mismas celdas en el orden exacto de la otra @Tabla",
                    "names": ["=", "igual"],
                    "inputs": [
                        { "doc": "La otra tabla a verificar", "names": "tabla" }
                    ]
                },
                "notequal": {
                    "doc": "Yo compruevo que yo las celdas de la otra @Tabla sean distintas o que esten en orden diferente",
                    "names": ["≠", "noIgual"],
                    "inputs": [
                        { "doc": "La otra tabla a verificar", "names": "tabla" }
                    ]
                }
            },
            "conversion": {
                "list": "Yo convierto una @Tabla a una lista de filas, donde cada fila es una @Estructura con sus nombre de columna como una propiedad.",
                "text": "Yo simplemento converito una @Tabla a @Texto"
            }
        },
        "Structure": {
            "doc": "Mira @DefinicionDeEsctructura",
            "name": "Estructura",
            "function": {
                "equals": {
                    "doc": "Yo verifico que mi propiedas tengas los mismos nombre y valores a la otra estructura.",
                    "names": ["=", "igual"],
                    "inputs": [
                        {
                            "doc": "La otra estructura a verificar",
                            "names": "valor"
                        }
                    ]
                },
                "notequal": {
                    "doc": "Yo verifico que mis propiedas sean differentes de cualquier manera a la otra esctructura",
                    "names": ["≠", "notEquals"],
                    "inputs": [
                        {
                            "doc": "La otra estructura a verificar",
                            "names": "valor"
                        }
                    ]
                }
            },
            "conversion": {
                "text": "Yo me convierto a @Texto"
            }
        }
    },
    "input": {
        "Random": {
            "doc": [
                "23!",
                "/DeficionDeFuncion aqui, yo te lo explicare./",
                "@Azar es una función curiosa que crea numeros al azar. Es curiosa porque cada ves que la evaluas, crea algo diferente,",
                "Esto creo un caos maravilloso que bien con algo impredecible.",
                "Por defecto, te da un valores de @Numero entre \\0\\ y \\1\\:",
                "\\Azar()\\",
                "Pero tambien le pues pasar un valor, y te generara valores entre \\0\\ y el valor:",
                "\\Azar(20)\\",
                "Y si le pasas dos valores, te generara valores entre y incluyendo los dos valores:",
                "\\Azar(=20 20)\\",
                "Si los numeros tienen unidades, las unidades seran preservadas (y si no son pares, la unidad del valor minimo ser usada):",
                "\\Azar(-20m 20m\\",
                "Y si le pasas numeros con una cantidad particular de digitos significativos despues del decimal, esa precision sera preservada.",
                "\\Azar(2.00, 20.00)\\"
            ],
            "names": ["Azar"],
            "inputs": [
                {
                    "names": "mínimo",
                    "doc": "El valor mínimo que sera creado, si no mayor a 0, entonces sera el valor maximo. Si @Nada es proveido, entonces el mínimo es \\0\\ "
                },
                {
                    "names": "maximo",
                    "doc": "El valor maximo que sera creado, o si es menor al minimo proveido, este sera el minimo. Si @Nada es proveido, entonces el valor maximo es \\1\\"
                }
            ]
        },
        "Choice": {
            "doc": [
                "/click y tap!/",
                "/@DefinicionDeFuncion aqui, yo te la explicare./",
                "Piensa de @Selección como un rio de @Frame/nombre que es selecionanda por su audiencia. Si alguien hace click, tap or seleciona con su teclado, presionando /Enter/ en una @Frase con un nombre -- @Selección tendra un nuevo valor, emparejanda con su nombre.",
                "La mejor manera de usarlos es creando una actuaccion con una frases de selección nombradas, despues usa @Reaccion para decidir que hacer con el nombre elejido",
                "Este es un ejempli simple.",
                "\\Grupo(\nPila() \n[\nFrase('uno' seleccion:T nombre: '1'1) \nFrase('dos' seleccion:T nombre: '2') \nFrase(Elección())\n]\n)\\",
                "Copea esto en tu editor, despues selecciona una de las dos @Frase. Podras ver que la tercera @Phrase muestra el nombe que fue seleccionado"
            ],
            "names": ["Selección", "Elección"]
        },
        "Button": {
            "doc": [
                "/has click click/",
                "/@DefinicionDeFuncion aqui, yo te lo explicare./"
            ],
            "names": "Botón",
            "down": {
                "names": "abajo",
                "doc": "Si es @None, la sequencia va a preveer los dos valors de arriba y abajo. Si es @Booleano, so va a proveer el valor del @Booleano"
            }
        },
        "Pointer": {
            "doc": [
                "/aquii/",
                "/@DeficionDeFuncion aqui, yo te la explicare./",
                "¿Tu conozes sobre ratones, paneles tactiles, y pantallas tactiles? hay veces tu quieres saber en donde tu punter de la audencia esta. Esta es la funcionalida de @Puntero",
                "Por supuesto, esta no es una opcion accesible: not todo el mundo puede ver or apuntar facilmente, asegurate de que no este excluyendo a nadie usando este stream.",
                "Si estas seguro de que nadie va a hacer excluido, usar @Puntero es tan simple como hacer un stream:",
                "\\Pointer()\\",
                "El @Lugar que provee va a corresponder en donde el punter en el @Escenario es apuntando"
            ],
            "names": ["Puntero"]
        },
        "Key": {
            "doc": [
                "/clickety/",
                "/@FunctionDefintion aquí, yo to le explicarè./",
                "Los teclados tiene muchas teclas, ¿no? @Key te va a decir cual es la que alguien esta presionando y soltando.",
                "Prueba esto",
                "\\Key()\\",
                "Mira como cuando presionas una tecla, aparece en el @Stage? Cada ves que se presiona una tecla, se agrega un nuevo texto a la secuencia, describiendo la tecla que se presionó.",
                "Para una tecla que representa un personaje, el valor va ser el personaje en @Text.",
                "Para teclas especiales, como la tecla de /Escapar/, va ser @Text que describe la tecla, usando un <pre-defined name@https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values>, lamentablemente solo disponible en ingles",
                "Si quieres saber de una tecla en particular, puedes proporcionarlo:",
                "\\Key('a')\\",
                "Y si solo quieres saber cuando una @Key esta soltada, puedes proporcionarlo usando @Boolean:",
                "\\Key('a' ⊥)\\"
            ],
            "names": "Teclado",
            "key": {
                "names": "tecla",
                "doc": "Si @None, entonces se proporcionan todas las teclas. Si es una @Text specifica, entonces solo esa tecla esta proporcionada."
            },
            "down": {
                "names": "abajo",
                "doc": "Si @None, entonces la tecla presionada genera aporte. Si \\T\\, entonces solo teclas presionadas estan proporcionadas, y si \\⊥\\, entonces solo teclas soltadas estan proporcionadas."
            }
        },
        "Time": {
            "doc": [
                "/tick tick tick/",
                "@FunctionDefinition aquí, yo te explicarè @Tiempo porque no puede hablar.",
                "Tiempo es una secuencia que avanza con una cierta frecuencia.",
                "Cada ves que avanza, @Program reevalúa con el nuevo valor del tiempo.",
                "Por ejemplo:",
                "\\Tiempo()\\",
                "Si proporcionas un @Tiempo/frecuencia, va avanzar a ese ritmo. Por ejemplo:",
                "\\Tiempo(1000ms)\\",
                "Sin embargo, la frecuencia tiene limites a lo pequeño que puede ser porque @Program necesita timepo para evaluar antes que pueda avanzar.",
                "Lo mas pequeño que puede ser es alrededor de \\20ms\\."
            ],
            "names": "Tiempo",
            "frequency": {
                "names": ["frecuencia"],
                "doc": "Esta es la frecuencia con que el tiempo avanza. Por defecto es \\33ms\\, que es acerca de 30 veces por segundo."
            }
        },
        "Volume": {
            "doc": [
                "/bzzzzzzz",
                "@FunctionDefinition aqui, yo tomaré el micrófono.",
                "Esta secuencia es una seria de volumen entre 0 y 1, muestreado a la frecuencia de tu elección. Por defecto, la frecuencia es \\30hz\\, o 30 veces por segundo, pero tu puedes cambiar lo a algo menos.",
                "\\Volume()\\",
                "Esto es ideal para escuchar que tan fuerte esta la audencia!"
            ],
            "names": "$? Volume",
            "frequency": {
                "names": ["frecuencia"],
                "doc": "El tiempo entre muestreos."
            }
        },
        "Pitch": {
            "doc": [
                "/hummmmm/",
                "@FunctionDefinition aqui, hablemos de tonos!",
                "Esta secuencia es una seria de tonos en hertz, indicando el tono del sonido, muestreado a la frecuencia de tu elección. Encontramos que la voces de los humanos es entre 20Hz y 5000Hz, entonces planea en numeros entre esa rango.",
                "\\Pitch()\\",
                "Esto es ideal para escuchar el tono que alguien habla o canta."
            ],
            "names": "$? Pitch",
            "frequency": {
                "names": ["frecuencia"],
                "doc": "El tiempo entre muestreos."
            }
        },
        "Camera": {
            "doc": [
                "/bzzzzzzz/",
                "@FunctionDefinition aqui, yo puedo explicar @Cámara!",
                "@Cámara proporciona una @List de @Color de tu mundo. Esa lista esencialmente representa una imagen, pero tu eres el que decides que hacer con el.",
                "Tu puedes intentar a representar la imagen con un montón de @Phrase, que se vería muy bien bonito! Intenta copiar esto...",
                "\\colors: Camera(32px 24px 33ms)\n\nStage(\ncolors.combine(\n[] \nƒ(phrases•[Phrase] row•[Color] y•#) \nphrases.append(\nrow.translate(\nƒ(color•Color x•#)\nPhrase('o' place: Place((x - 1) · 0.5m y · -0.5m) color: color duration: 0s\n)\n)\n)\n)\n)\\",
                "Pero también puedes analizar los colores para decidir si una luz estava encendida o apagada, o si un color en particular era común, dejando que la audencia influya la actuación con los colors que muestran."
            ],
            "names": ["Cámara"],
            "width": {
                "names": ["ancho"],
                "doc": "El numero de @Color para muestrar en una fila"
            },
            "height": {
                "names": ["altura"],
                "doc": "El numero de @Color para muestrar en una columna."
            },
            "frequency": {
                "names": ["frecuencia"],
                "doc": "El tiempo entre @Color muestras."
            }
        },
        "Motion": {
            "names": "movimiento",
            "doc": [
                "/Hey! @DefinicionDeFuncion aqui. Que tal si te explico @Movimiento?",
                "Basicamente, @Movimiento es un stream de @Frase. Le pasas un @Frase inicial, y depues la refina a un nuevo lugar y rotacion basado en la gravedad.",
                "Esto te deja hace cosas simples como crear un emoji rebotando:",
                "\\Movimiento(Phrase('o') comienzo: Lugar(0m 10m))\\",
                "Ves como rebota? En la primera evaluacion, le damos una posición alta en el @Escenario, pero depues, recive @Nada, lo cual deja que el @Movimiento pueda cambiar a cualquier posición en que la gravedad la puede poner",
                "Mira otras maneras the configurarlo abajo."
            ],
            "type": {
                "doc": "La @Frase para refinar la nueva @Frase/descancado en lugars y rotaciones.",
                "names": "tipo"
            },
            "startplace": {
                "doc": "El lugar inical para la @Frase",
                "names": "lugarInicial"
            },
            "startvx": {
                "doc": "La velocidad inicial sobre el eje x en la que la @Frase deberia de moverse ",
                "names": "vxinicial"
            },
            "startvy": {
                "doc": "La velocidad incial sobre el eje y, en la que la @Frase deberia de moverse, si anula la gravedad",
                "names": "vyinicial"
            },
            "startvz": {
                "doc": "La velocidad inicial sobre el eje z, en la que la @Frase bederia moverse",
                "names": "vzinicia"
            },
            "startvangle": {
                "doc": "La velocidad rotacional incia en la que la @Frase deberia de rotar",
                "names": "angulavinicial"
            },
            "vx": {
                "doc": "La velocidad sobre el eje x, en la cual la @Frase deberia de moverse, independientemente de la fisica.",
                "names": "vx"
            },
            "vy": {
                "doc": "La velocidad sobre el eje y, en la cual la @Frase deberia de moverse, independientemente de la fisica",
                "names": "vy"
            },
            "vz": {
                "doc": "La velocidad sobre el eje z, en la cual la @Frase deberia de moverse, independientement de la fisica",
                "names": "vz"
            },
            "vangle": {
                "doc": "La velocidad rotacional, en la cual la @Frase deberia de rotar, independientemente de la fisica",
                "names": "angulov"
            },
            "mass": {
                "doc": "La cantidad de masa de una @Frase, que puede afectar colisiones.",
                "names": "masa"
            },
            "bounciness": {
                "doc": "La fraccion entre 0 y 1 que determina cuanto la velocidad sera amortiguada cuando una @Frase choca",
                "names": "rebote"
            },
            "gravity": {
                "doc": "La gravedad para aplicar a @Movimientio/vy",
                "names": "gravedad"
            }
        },
        "Chat": {
            "doc": [
                "/Hola! @DeficionDeFuncion aqui. Entonces quieres charlar?",
                "La idea basica de el stream de charla, esque la audencia escribe un mensaje, y el program le responde.",
                "Por ejemplo, ese simple programa, chequea si el mensaje es 'hola', y si es asi, el programa lo evalua a 'hey!'. De no ser asi, se evaluara a 'que?'",
                "\\Charla().tiene('hola') ? 'hey! 'que?'\\",
                "Asi de facil! Tu puedes hacer todo tipo de actuacciones con esto, con bots para chatear, aventuras de texto, o esquemas de control basados en texto para otro tipo de actuacciones"
            ],
            "names": "Charla"
        },
        "Placement": {
            "doc": ["colocación"],
            "names": [
                "/Hola, @DefinicionDeFuncion aqui. Vamos a hablar sobre como hacer que nos movamos!/",
                "Hay muchas maneras de colocarnos en un @Escenario. Nos puedes dar un @Lugar explicito. Tambien puedes usar @Movimientio, y deja que la gravedad haga su trabajo. Tambien nos puedes poner en un @Grupo y deja que nos arreglen en una manera particular.",
                "Pero hay veces tu le quieres dar a la /audiencia/ el control sobre en donde estamos en el @Escenario. Para eso el @Colocacion.",
                "Asi es como funciona: simplemente crea una @Colocacion y pasaselo a nuestro @Lugar:",
                "\\Frase('hola' lugar:Colocacion())\\",
                "Entonces, cada ves que la audencia use una tecla de flecha or haga click o tap en el escenario, la @Colocacion,va a hacer un nuevo @Lugar que se mueve en la dirección deseada.",
                "Trata de copear esto adentro de tu programa, y muevenos con el puntero o el teclado.",
                "Tu puedes customizar la @Colocacion, habilitando y desabilitando movimientons en ciertas dimensiones, cambiando que tan lejos un @Lugar se puede mover, y el @Lugar inicial con el que el stream comienza."
            ],
            "inputs": [
                {
                    "doc": "El lugar inicial para comenzar.",
                    "names": "comienzo"
                },
                {
                    "doc": "distancia",
                    "names": "Cuantos metros el lugar deberia de moverse cuando la audiencia pide un movimiento."
                },
                {
                    "doc": "Si verdadero, permite movimiento en el eje horizontal ",
                    "names": "horizontal"
                },
                {
                    "doc": "Si verdadero, permite movimiento en el eje vertical",
                    "names": "vertical"
                },
                {
                    "doc": "Si verdadero, permite movimiento en el eje z, con las teclas (+) y (-).",
                    "names": "profundidad"
                }
            ]
        },
        "Webpage": {
            "doc": [
                "/Hola, @DeficionDeFuncion aqui. Vamos a hablar sobre como obtener paginas web de internet!/",
                "Cuando nosotros primero escuchamos sobre el internet, lo encontramos facinante. Un mundo entero de computadores conectados compartiendo documentos con lo demas, realmente asombroso!",
                "Entonces, hicimos una sequencia que lo conecta. Haci:",
                "\\PaginaWeb('https://wordplay.dev')\\",
                "Y aparentemente hay algo llamado <CSS@https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/What_is_CSS>, que te deja consultar cosas en otras paginas web, esto incluye consulta de seleccion con CSS, esto solo nos dara el texto que coincide con la consulta. Por ejemplo, esto te devuelve los encabezados de nivel uno.",
                "\\PaginaWeb('https://wordplay.dev' 'h1')\\",
                "Hay un monton de cosas que pueden fallar con esto. Si pierdes coneccion a internet, o si el URL no se resuelve a nada, o si el URL no es publico, o el URL no es una pagina HTML... Todo esto puede causar un fallo."
            ],
            "names": "PaginaWeb",
            "url": {
                "doc": "el URL de la pagina HTML para buscar",
                "names": "url"
            },
            "query": {
                "doc": "La consulta de CSS para evaluar el HTML",
                "names": "consulta"
            },
            "frequency": {
                "doc": "El numero de minutos que deberia de pasar antes de ir a buscar de nuevo",
                "names": "frequencia"
            },
            "error": {
                "invalid": "este URL no es valido",
                "unvailable": "este URL no es accesible",
                "notHTML": "la respuesta no es HTML",
                "noConnection": "no hay coneccion a Wordplay"
            }
        }
    },
    "output": {
        "Type": {
            "names": "tipo",
            "doc": "$?"
        },
        "Stage": {
            "names": "Verso",
            "doc": "$?",
            "description": "$?",
            "content": { "doc": "$?", "names": "contenido" },
            "frame": { "doc": "$?", "names": "marco" },
            "size": { "doc": "$?", "names": "tamaño" },
            "face": { "doc": "$?", "names": "fuente" },
            "place": { "doc": "$?", "names": "place" },
            "name": { "doc": "$?", "names": "nombre" },
            "selectable": { "doc": "$?", "names": "seleccionable" },
            "color": {
                "doc": "$?",
                "names": "$? color"
            },
            "background": { "doc": "$?", "names": "fondo" },
            "opacity": {
                "doc": "$?",
                "names": "$? opacity"
            },
            "offset": {
                "doc": "$?",
                "names": "$? offset"
            },
            "rotation": {
                "doc": "$?",
                "names": "$? rotation"
            },
            "scale": {
                "doc": "$?",
                "names": "$? scale"
            },
            "flipx": {
                "doc": "$?",
                "names": "$? flipx"
            },
            "flipy": {
                "doc": "$?",
                "names": "$? flipy"
            },
            "entering": { "doc": "$?", "names": "$! ingresar" },
            "resting": { "doc": "$?", "names": "$! descansar" },
            "moving": { "doc": "$?", "names": "$! mover" },
            "exiting": { "doc": "$?", "names": "$! salida" },
            "duration": { "doc": "$?", "names": "duración" },
            "style": { "doc": "$?", "names": "estilo" }
        },
        "Group": {
            "names": "Group",
            "doc": "$?",
            "description": "$?",
            "content": { "doc": "$?", "names": "content" },
            "layout": { "doc": "$?", "names": "layout" },
            "size": { "doc": "$?", "names": "tamaño" },
            "face": { "doc": "$?", "names": "fuente" },
            "place": { "doc": "$?", "names": "place" },
            "name": { "doc": "$?", "names": "nombre" },
            "selectable": { "doc": "$?", "names": "seleccionable" },
            "color": {
                "doc": "$?",
                "names": "$? color"
            },
            "background": { "doc": "$?", "names": "fondo" },
            "opacity": {
                "doc": "$?",
                "names": "$? opacity"
            },
            "offset": {
                "doc": "$?",
                "names": "$? offset"
            },
            "rotation": {
                "doc": "$?",
                "names": "$? rotation"
            },
            "scale": {
                "doc": "$?",
                "names": "$? scale"
            },
            "flipx": {
                "doc": "$?",
                "names": "$? flipx"
            },
            "flipy": {
                "doc": "$?",
                "names": "$? flipy"
            },
            "entering": { "doc": "$?", "names": "$! ingresar" },
            "resting": { "doc": "$?", "names": "$! descansar" },
            "moving": { "doc": "$?", "names": "$! mover" },
            "exiting": { "doc": "$?", "names": "$! salida" },
            "duration": { "doc": "$?", "names": "duración" },
            "style": { "doc": "$?", "names": "estilo" }
        },
        "Phrase": {
            "names": "Frase",
            "doc": "$?",
            "description": "$?",
            "text": { "doc": "$?", "names": "texto" },
            "size": { "doc": "$?", "names": "tamaño" },
            "face": { "doc": "$?", "names": "fuente" },
            "place": { "doc": "$?", "names": "place" },
            "wrap": {
                "doc": "$?",
                "names": "$? wrap"
            },
            "alignment": {
                "doc": "$?",
                "names": "$? alignment"
            },
            "name": { "doc": "$?", "names": "nombre" },
            "selectable": { "doc": "$?", "names": "seleccionable" },
            "color": {
                "doc": "$?",
                "names": "$? color"
            },
            "background": { "doc": "$?", "names": "fondo" },
            "opacity": {
                "doc": "$?",
                "names": "$? opacity"
            },
            "offset": {
                "doc": "$?",
                "names": "$? offset"
            },
            "rotation": {
                "doc": "$?",
                "names": "$? rotation"
            },
            "scale": {
                "doc": "$?",
                "names": "$? scale"
            },
            "flipx": {
                "doc": "$?",
                "names": "$? flipx"
            },
            "flipy": {
                "doc": "$?",
                "names": "$? flipy"
            },
            "entering": { "doc": "$?", "names": "$! ingresar" },
            "resting": { "doc": "$?", "names": "$! descansar" },
            "moving": { "doc": "$?", "names": "$! mover" },
            "exiting": { "doc": "$?", "names": "$! salida" },
            "duration": { "doc": "$?", "names": "duración" },
            "style": { "doc": "$?", "names": "estilo" }
        },
        "Arrangement": { "names": ["Arrangement"], "doc": "$?" },
        "Row": {
            "names": ["Fila"],
            "doc": "$?",
            "description": "$?",
            "alignment": {
                "doc": "$?",
                "names": "$? alignment"
            },
            "padding": { "doc": "$?", "names": "relleno" }
        },
        "Stack": {
            "names": "Pila",
            "doc": "$?",
            "description": "$?",
            "alignment": {
                "doc": "$?",
                "names": "$? alignment"
            },
            "padding": { "doc": "$?", "names": "relleno" }
        },
        "Grid": {
            "names": "cuadrícula",
            "doc": "$?",
            "description": "cuadrícula de $1 fila, $2 columnas",
            "rows": { "doc": "$?", "names": "fila" },
            "columns": { "doc": "$?", "names": "columnas" },
            "padding": { "doc": "$?", "names": "relleno" },
            "cellWidth": { "doc": "$?", "names": "anchodecelda" },
            "cellHeight": { "doc": "$?", "names": "alturadecelda" }
        },
        "Free": {
            "names": "Suelto",
            "doc": "$?",
            "description": "forma libre, $1 producción"
        },
        "Shape": { "names": "forma", "doc": "$?" },
        "Rectangle": {
            "names": "Rectángulo",
            "doc": "$?",
            "left": { "doc": "$?", "names": "izquierda" },
            "top": { "doc": "$?", "names": "masalta" },
            "right": { "doc": "$?", "names": "derecha" },
            "bottom": { "doc": "$?", "names": "abajo" }
        },
        "Pose": {
            "names": "Pose",
            "doc": "$?",
            "duration": { "doc": "$?", "names": "duración" },
            "style": { "doc": "$?", "names": "estilo" },
            "color": { "doc": "$?", "names": "color" },
            "opacity": { "doc": "$?", "names": "opacidad" },
            "offset": { "doc": "$?", "names": "offset" },
            "rotation": { "doc": "$?", "names": "inclinación" },
            "scale": { "doc": "$?", "names": "escala" },
            "flipx": { "doc": "$?", "names": "voltearx" },
            "flipy": { "doc": "$?", "names": "volteary" },
            "description": "$?"
        },
        "Color": {
            "names": "Color",
            "doc": "$?",
            "lightness": { "doc": "$?", "names": ["luminosidad"] },
            "chroma": { "doc": "$?", "names": ["croma"] },
            "hue": { "doc": "$?", "names": ["matiz"] }
        },
        "Sequence": {
            "names": "Secuencia",
            "doc": "$?",
            "poses": { "doc": "$?", "names": "poses" },
            "duration": {
                "doc": "$?",
                "names": "$? duration"
            },
            "style": {
                "doc": "$?",
                "names": "$? style"
            },
            "count": { "doc": "$?", "names": "count" }
        },
        "Place": {
            "names": ["Posición"],
            "doc": "$?",
            "x": { "doc": "$?", "names": "x" },
            "y": { "doc": "$?", "names": "y" },
            "z": { "doc": "$?", "names": "z" }
        },
        "Easing": {
            "straight": "lineal",
            "cautious": "precavida",
            "pokey": "lenta",
            "zippy": "enérgico"
        },
        "sequence": {
            "sway": {
                "doc": "$?",
                "names": ["vaivén"],
                "angle": { "doc": "$?", "names": ["ángulo"] }
            },
            "bounce": {
                "doc": "$?",
                "names": ["rebotar"],
                "height": { "doc": "$?", "names": ["altura"] }
            },
            "spin": { "doc": "$?", "names": ["girar"] },
            "fadein": { "doc": "$?", "names": ["revelar"] },
            "popup": { "doc": "$?", "names": ["surgir"] },
            "shake": { "doc": "$?", "names": ["agitar"] }
        }
    },
    "ui": {
        "font": {
            "app": "Noto Sans",
            "code": "Noto Mono"
        },
        "phrases": {
            "welcome": "hola"
        },
        "widget": {
            "confirm": {
                "cancel": "cancelar"
            },
            "dialog": {
                "close": "cerrar"
            },
            "loading": {
                "message": "Cargando fuentes y texto, ¡gracias por esperar! "
            }
        },
        "tile": {
            "toggle": {
                "fullscreen": {
                    "on": "salir de pantalla completa",
                    "off": "exapandir teja a pantalla completa"
                },
                "show": {
                    "on": "esconder esta teja",
                    "off": "mostrar esta teja"
                }
            },
            "button": {
                "collapse": "colapsar esta ventana"
            }
        },
        "project": {
            "error": {
                "unknown": "Esta actuación no existe o no es pública."
            },
            "button": {
                "showCollaborators": "mostrar a los colaboradores el diálogo",
                "removeCollaborator": "quitar colaboradora",
                "copy": "copiar proyecto como texto",
                "addSource": "crear una nueva $source",
                "duplicate": "copia este proyecto",
                "revert": "volver al código original ",
                "focusOutput": "enfoque el teclado en el escenario",
                "focusSource": "enfoque en la siguiente fuente ",
                "focusDocs": "enfoque en la documentación",
                "focusPalette": "enfoque en la paleta",
                "focusCycle": "enfoque en la siguiente teja "
            },
            "toggle": {
                "public": {
                    "on": "cambiar a privado",
                    "off": "cambiar a publico"
                }
            },
            "field": {
                "name": {
                    "description": "editar el nobmre del proyecto",
                    "placeholder": "nombre"
                }
            },
            "help": "mostrar atajos de teclado"
        },
        "source": {
            "label": "editora de programas",
            "empty": [
                "¡Empecemos! Puedes …",
                "• Abre 📕 y arrástranos 🖱️ a este programa.",
                "• Escribe $1 y elígenos del menú.",
                "• Si nos conoces bien, empieza a escribir.",
                "• Explora la galería en busca de inspiración.",
                "Si estas atascada, <aprende más@://learn>."
            ],
            "overwritten": "¡Recibí una versión más reciente!",
            "confirm": {
                "delete": {
                    "description": "borra esta $source",
                    "prompt": "borrar"
                }
            },
            "toggle": {
                "blocks": {
                    "on": "esconder los fondos de los bloques",
                    "off": "mostrar los fondos de los bloques"
                },
                "glyphs": {
                    "on": "colapsar los glifos coincidentes",
                    "off": "expandir los glifos coincidentes"
                }
            },
            "button": {
                "selectOutput": "mostrar este resultado en el escenario",
                "expandSequence": "expandir este código colapsado"
            },
            "field": {
                "name": {
                    "description": "editar nombre de fuente",
                    "placeholder": "nombre"
                }
            },
            "menu": {
                "label": "menú de autocompletar",
                "show": "mostrar menú de autocompletar",
                "back": "salir del submenú"
            },
            "cursor": {
                "priorLine": "mover el cursor a la línea anterior",
                "nextLine": "mover el cursor a la línea después",
                "priorInline": "mover el cursor a la posición anterior",
                "nextInline": "mover el cursor a la posición después",
                "lineStart": "mover el cursor al inicio de la línea",
                "lineEnd": "mover el cursor al final de la línea",
                "priorNode": "seleccionar vecina antes",
                "nextNode": "seleccionar vecina después",
                "parent": "seleccionar contenedor",
                "selectAll": "seleccionar programa",
                "incrementLiteral": "aumentar número, texto o booleano",
                "decrementLiteral": "disminuir número, texto o booleano",
                "insertSymbol": "inserte $1",
                "insertTrue": "insertar verdadera",
                "insertFalse": "insertar falsa",
                "insertNone": "insertar ningún símbolo",
                "insertNotEqual": "insertar no igual",
                "insertProduct": "insertar símbolo de multiplicación",
                "insertQuotient": "insertar símbolo de cociente",
                "insertDegree": "insertar símbolo de grado",
                "insertFunction": "insertar una función",
                "insertLessOrEqual": "insertar inferior o igual a",
                "insertGreaterOrEqual": "insertar superior o igual a",
                "insertStream": "insertar símbolo de arroyo",
                "insertConvert": "insertar símbolo de conversión",
                "insertPrevious": "insertar símbolo de anterior",
                "insertType": "insertar símbolo de tipo",
                "insertTable": "insertar símbolo de tabla",
                "insertLine": "insertar salto de línea",
                "backspace": "borrar selección o carácter anterior",
                "cut": "corte lo que esté seleccionado",
                "copy": "copiar lo que esté  seleccionado",
                "paste": "pegar el contenido del teclado",
                "parenthesize": "poner entre paréntesis lo que esté seleccionado",
                "enumerate": "enumerar selección",
                "type": "escribir caracteres",
                "undo": "deshacer la última edición",
                "redo": "rehacer la deschaca de la última edición",
                "search": "buscar caracteres especiales para insertar"
            }
        },
        "conflicts": {
            "label": "conflictos"
        },
        "output": {
            "label": "salida del programa",
            "toggle": {
                "grid": {
                    "on": "ocultar líneas de cuadrícula",
                    "off": "mostrar líneas de cuadrícula"
                },
                "fit": {
                    "on": "controlar el zoom manualmente",
                    "off": "ajustar el zoom al contenido"
                },
                "paint": {
                    "off": "colocar salida",
                    "on": "salida de pintura"
                }
            },
            "field": {
                "key": {
                    "label": "escuchando las pulsaciones de teclas",
                    "placeholder": "mensaje"
                }
            },
            "button": {
                "submit": "enviar este mensaje de chat"
            }
        },
        "timeline": {
            "label": "línea de tiempo",
            "slider": "control deslizante de línea de tiempo",
            "button": {
                "play": "evaluar el programa hasta el final, respondiendo a las entradas en tiempo real",
                "pause": "pausar el programa, permitiendo avanzar y retroceder",
                "backStep": "retroceder una vez",
                "backNode": "retroceder a la evaluación del nodo anterior",
                "backInput": "retroceder a la entrada anterior",
                "out": "salir de esta función",
                "forwardStep": "da un paso adelante",
                "forwardNode": "avance a la siguiente evaluación del nodo",
                "forwardInput": "avance a la siguiente entrada de flujo",
                "present": "al presente",
                "start": "al principio",
                "reset": "reiniciar la actuación"
            }
        },
        "docs": {
            "label": "navegador de documentación",
            "link": "mostrar concepto $1 en documentación",
            "learn": "aprende más …",
            "nodoc": "¿Quién soy? ¿Qué soy yo? ¿Cuál es mi propósito?",
            "button": {
                "home": "volver al inicio",
                "back": "volver al anterior"
            },
            "field": {
                "search": "buscar conceptos con palabras"
            },
            "header": {
                "inputs": "Entradas",
                "interfaces": "Interfaces",
                "properties": "Propiedades",
                "functions": "Funciones",
                "conversions": "Conversiones"
            }
        },
        "dialog": {
            "share": {
                "header": "Compartir",
                "explanation": "Controla quién puede editar y ver este proyecto.",
                "subheader": {
                    "collaborators": {
                        "header": "Colaboradoras",
                        "explanation": "Los colaboradores pueden ver y editar este proyecto. Agregarlas o quitarlas por correo electrónico."
                    },
                    "public": {
                        "header": "Pública / Privada",
                        "explanation": "Los proyectos públicos pueden ser vistos por cualquier persona en el mundo. Al realizar un proyecto, prometes:"
                    }
                },
                "field": {
                    "email": {
                        "placeholder": "correo electrónico",
                        "description": "la dirección de correo electrónico de la persona a la que desea otorgarle acceso de edición."
                    }
                },
                "mode": {
                    "public": {
                        "label": "visibilidad",
                        "modes": ["privada", "pública"]
                    }
                },
                "error": {
                    "unknown": "No conocemos a ningún creador con este correo electrónico."
                },
                "button": {
                    "submit": "Comparte el proyecto con esta dirección de correo electrónico"
                }
            },
            "settings": {
                "header": "Ajustes",
                "explanation": "Cambie los ajustes de disposición, aparato y tema.",
                "button": {
                    "show": "mostrar diálogo de ajustes"
                },
                "mode": {
                    "layout": {
                        "label": "disposición",
                        "modes": [
                            "automática",
                            "horizontal",
                            "vertical",
                            "libre"
                        ]
                    },
                    "animate": {
                        "label": "animaciones",
                        "modes": [
                            "apagada",
                            "prendida ",
                            "velocidad media",
                            "velocidad tercera ",
                            "velocidad a quarto"
                        ]
                    },
                    "dark": {
                        "label": "tema",
                        "modes": [
                            "colores claros",
                            "colores oscuros",
                            "usar el ajuste del aparato"
                        ]
                    },
                    "writing": {
                        "label": "disposición de escritura",
                        "modes": [
                            "horizontal, de izquierda a derecha",
                            "vertical, de derecha a izquierda",
                            "horizontal, de izquierda a derecha",
                            "vertical, de derecha a izquierda",
                            "vertical, de izquierda a derecha"
                        ]
                    }
                }
            },
            "locale": {
                "header": "$?",
                "explanation": "$?",
                "subheader": {
                    "selected": "$?",
                    "supported": "$?",
                    "help": "$?"
                },
                "button": {
                    "show": "$?",
                    "add": "$?",
                    "remove": "$?"
                }
            },
            "help": {
                "header": "$?",
                "explanation": "$?",
                "subheader": {
                    "moveCursor": "$?",
                    "editCode": "$?",
                    "insertCode": "$?",
                    "debug": "$?"
                }
            }
        },
        "palette": {
            "label": "$?",
            "labels": {
                "mixed": "$?",
                "computed": "$?",
                "default": "$?",
                "inherited": "$?",
                "notSequence": "$?",
                "notContent": "$?"
            },
            "button": {
                "revert": "$?",
                "set": "$?",
                "addPhrase": "$?",
                "addGroup": "$?",
                "remove": "$?",
                "up": "$?",
                "down": "$?",
                "edit": "$?",
                "sequence": "$?",
                "createPhrase": "$?",
                "createGroup": "$?",
                "createStage": "$?"
            },
            "prompt": {
                "offerPhrase": "$?",
                "offerGroup": "$?",
                "offerStage": "$?",
                "pauseToEdit": "$?",
                "editing": "¡edítame!"
            },
            "field": {
                "coordinate": "$?",
                "text": "$?"
            },
            "sequence": {
                "button": {
                    "add": "$?",
                    "remove": "$?",
                    "up": "$?",
                    "down": "$?"
                },
                "field": {
                    "percent": "$?"
                }
            }
        },
        "save": {
            "saving": "$?",
            "saved": "$?",
            "local": "$?",
            "unsaved": "$?"
        },
        "page": {
            "unknown": {
                "header": "$?",
                "message": "$?"
            },
            "landing": {
                "call": ["$?"],
                "link": {
                    "about": "$?",
                    "learn": "$?",
                    "projects": "$?",
                    "galleries": "$?",
                    "rights": "$?"
                }
            },
            "learn": {
                "header": "$?",
                "error": "$?",
                "button": {
                    "next": "$?",
                    "previous": "$?"
                }
            },
            "projects": {
                "header": "$?",
                "prompt": "$?",
                "button": {
                    "create": "$?",
                    "edit": "$?"
                },
                "confirm": {
                    "archive": {
                        "description": "$?",
                        "prompt": "$?"
                    }
                }
            },
            "galleries": {
                "header": "$?",
                "prompt": "$?",
                "examples": "ejemplos"
            },
            "about": {
                "header": "$?",
                "content": ["$?"]
            },
            "login": {
                "header": "$?",
                "anonymous": "$?",
                "prompt": {
                    "login": "$?",
                    "enter": "$?",
                    "play": "$?",
                    "change": "$?",
                    "logout": "$?",
                    "sent": "$?",
                    "success": "$?",
                    "confirm": "$?",
                    "delete": "$?",
                    "reallyDelete": "$?"
                },
                "error": {
                    "expired": "$?",
                    "invalid": "$?",
                    "email": "$?",
                    "offline": "$?",
                    "failure": "$?",
                    "unchanged": "$?",
                    "delete": "$?"
                },
                "feedback": {
                    "changing": "$?",
                    "deleting": "$?"
                },
                "field": {
                    "email": {
                        "description": "$?",
                        "placeholder": "$?"
                    }
                },
                "button": {
                    "logout": {
                        "tip": "$?",
                        "label": "$?"
                    },
                    "login": "$?",
                    "update": "$?",
                    "delete": {
                        "tip": "$?",
                        "label": "$?"
                    },
                    "reallyDelete": {
                        "tip": "$?",
                        "label": "$?"
                    }
                }
            },
            "rights": {
                "header": "$?",
                "content": ["$?"],
                "consequences": ["$?"]
            }
        },
        "edit": {
            "node": "$?",
            "before": "antes de $1",
            "inside": "dentro de $1",
            "between": "$?",
            "line": "$?",
            "conflicts": "$?",
            "assign": "$?",
            "append": "$?",
            "remove": "$?",
            "replace": "$?",
            "wrap": "envolver",
            "unwrap": "desenvolver",
            "bind": "nombra esta expresión"
        },
        "template": {
            "unwritten": "no escrito",
            "unparsable": "$?"
        }
    },
    "rules": {
        "violence": "$?",
        "dehumanization": "$?"
    }
}
